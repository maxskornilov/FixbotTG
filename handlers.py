import logging
import telebot
from telebot import types
import re
import os
from flask import request
from config import TOKEN, ACCESS_CODES, TARIFF_DESCRIPTIONS, MODULE_ACCESS, ADMIN_IDS
from database import (
    get_user, add_user, update_user_tariff, add_feedback, 
    update_module_progress, get_module_progress, add_homework_submission,
    get_homework_submissions
)
from modules_content import MODULES, MODULE_DESCRIPTIONS, HOMEWORK, ADDITIONAL_MATERIALS
from keyboards import (
    get_main_menu_keyboard, get_back_keyboard, get_modules_keyboard, 
    get_homework_keyboard, get_module_content_keyboard, get_access_keyboard,
    get_submit_homework_keyboard, get_additional_materials_keyboard,
    get_feedback_confirm_keyboard
)

logger = logging.getLogger(__name__)

class BotStates:
    AWAITING_ACCESS_CODE = 'awaiting_access_code'
    AWAITING_FEEDBACK = 'awaiting_feedback'
    AWAITING_HOMEWORK_SUBMISSION = 'awaiting_homework_submission'
    CURRENT_MODULE = 'current_module'  # Stores the current module ID for context


def register_command_handlers(bot, user_states, temp_data):
    @bot.message_handler(commands=['start'])
    def start(message):
        user_id = message.from_user.id
        user = get_user(user_id)
        
        # Welcome message
        welcome_text = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫—É—Ä—Å–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞, –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è "
            "–∏ —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å."
        )
        
        # Check if user exists in database
        if user:
            tariff = user[4]  # Index 4 corresponds to tariff in the database row
            bot.send_message(
                user_id, 
                f"{welcome_text}\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: *{tariff}*",
                parse_mode="Markdown"
            )
            show_main_menu(message, bot)
        else:
            bot.send_message(
                user_id, 
                f"{welcome_text}\n\n–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access.",
                parse_mode="Markdown"
            )
    
    @bot.message_handler(commands=['help'])
    def help_command(message):
        help_text = (
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/access - –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞\n"
            "/modules - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
            "/homework - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "/progress - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "/webapp - –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "/feedback - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        bot.send_message(message.chat.id, help_text, parse_mode="Markdown")
    
    @bot.message_handler(commands=['menu'])
    def menu_command(message):
        show_main_menu(message, bot)
    
    @bot.message_handler(commands=['access'])
    def access_command(message):
        user_id = message.from_user.id
        
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # Set user state to awaiting access code
        user_states[user_id] = BotStates.AWAITING_ACCESS_CODE
    
    @bot.message_handler(commands=['modules'])
    def modules_command(message):
        user_id = message.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.send_message(
                user_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
            )
            return
        
        tariff = user[4]
        available_modules = MODULE_ACCESS.get(tariff.lower(), [])
        
        bot.send_message(
            user_id,
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:*",
            parse_mode="Markdown",
            reply_markup=get_modules_keyboard(tariff, available_modules)
        )
    
    @bot.message_handler(commands=['homework'])
    def homework_command(message):
        user_id = message.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.send_message(
                user_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
            )
            return
        
        tariff = user[4]
        available_modules = MODULE_ACCESS.get(tariff.lower(), [])
        
        bot.send_message(
            user_id,
            "*–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:*",
            parse_mode="Markdown",
            reply_markup=get_homework_keyboard(tariff, available_modules)
        )
    
    @bot.message_handler(commands=['progress'])
    def progress_command(message):
        user_id = message.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.send_message(
                user_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
            )
            return
        
        tariff = user[4]
        available_modules = MODULE_ACCESS.get(tariff.lower(), [])
        progress = get_module_progress(user_id)
        
        # Convert progress data to a more usable format
        completed_modules = [module_id for module_id, completed in progress if completed]
        
        # Create progress message
        progress_text = "*–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É:*\n\n"
        
        for module_id in available_modules:
            module_name = MODULES.get(module_id, f"–ú–æ–¥—É–ª—å {module_id}")
            status = "‚úÖ" if module_id in completed_modules else "‚è≥"
            progress_text += f"{status} –ú–æ–¥—É–ª—å {module_id}: {module_name}\n"
        
        # Calculate overall progress
        completed_percentage = 0
        if available_modules:
            completed_percentage = (len(completed_modules) / len(available_modules)) * 100
        
        progress_text += f"\n*–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {completed_percentage:.1f}%*"
        
        bot.send_message(
            user_id,
            progress_text,
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )
    
    @bot.message_handler(commands=['feedback'])
    def feedback_command(message):
        user_id = message.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.send_message(
                user_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
            )
            return
        
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
            reply_markup=get_back_keyboard()
        )
        
        # Set user state to awaiting feedback
        user_states[user_id] = BotStates.AWAITING_FEEDBACK
    
    @bot.message_handler(commands=['info'])
    def info_command(message):
        user_id = message.from_user.id
        
        info_text = (
            "*–û –∫—É—Ä—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏*\n\n"
            "–≠—Ç–æ—Ç –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞. "
            "–û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 –º–æ–¥—É–ª–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ "
            "–∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n"
            
            "*–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞:*\n"
            "‚Ä¢ 8 –º–æ–¥—É–ª–µ–π —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π\n\n"
            
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–π: –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º 1-3\n"
            "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º 1-5\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º: –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
            
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'."
        )
        
        bot.send_message(
            user_id,
            info_text,
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )
        
    @bot.message_handler(commands=['webapp'])
    def webapp_command(message):
        user_id = message.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.send_message(
                user_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
            )
            return
        
        # URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        host = os.environ.get('REPLIT_APP_HOST', 'replit.dev')
        mini_app_url = f"https://{host}/mini-app?user_id={user_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "üìä –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å", 
            web_app=types.WebAppInfo(url=mini_app_url)
        ))
        
        bot.send_message(
            user_id,
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫—É—Ä—Å—É:",
            reply_markup=markup
        )

    # Homework submission commands
    for module_id in range(1, len(MODULES) + 1):
        # Use a closure to capture the current module_id
        def create_homework_handler(module_id):
            command = f"/homework{module_id}"
            @bot.message_handler(commands=[f"homework{module_id}"])
            def homework_submission_handler(message):
                user_id = message.from_user.id
                user = get_user(user_id)
                
                if not user:
                    bot.send_message(
                        user_id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
                    )
                    return
                
                tariff = user[4]
                available_modules = MODULE_ACCESS.get(tariff.lower(), [])
                
                if module_id not in available_modules:
                    bot.send_message(
                        user_id,
                        f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é {module_id}. –û–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                
                bot.send_message(
                    user_id,
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è {module_id}.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, "
                    f"–≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                    reply_markup=get_back_keyboard()
                )
                
                # Set state and store module_id
                user_states[user_id] = BotStates.AWAITING_HOMEWORK_SUBMISSION
                temp_data[user_id] = {"module_id": module_id}
        
        # Register the handler
        create_homework_handler(module_id)


def register_message_handlers(bot, user_states, temp_data):
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotStates.AWAITING_ACCESS_CODE)
    def handle_access_code(message):
        user_id = message.from_user.id
        access_code = message.text.strip()
        
        # Clear user state
        user_states.pop(user_id, None)
        
        # Check if access code is valid
        valid_tariff = None
        for tariff, codes in ACCESS_CODES.items():
            if access_code in codes:
                valid_tariff = tariff
                break
        
        if valid_tariff:
            user = get_user(user_id)
            if user:
                # Update existing user's tariff
                success = update_user_tariff(user_id, valid_tariff)
                if success:
                    bot.send_message(
                        user_id,
                        f"‚úÖ –í–∞—à —Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ *{valid_tariff}*!",
                        parse_mode="Markdown",
                        reply_markup=get_main_menu_keyboard()
                    )
                else:
                    bot.send_message(
                        user_id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=get_main_menu_keyboard()
                    )
            else:
                # Add new user
                username = message.from_user.username if message.from_user.username else ""
                first_name = message.from_user.first_name if message.from_user.first_name else ""
                last_name = message.from_user.last_name if message.from_user.last_name else ""
                
                success = add_user(user_id, username, first_name, last_name, valid_tariff)
                if success:
                    bot.send_message(
                        user_id,
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å! –í–∞—à —Ç–∞—Ä–∏—Ñ: *{valid_tariff}*\n\n"
                        f"{TARIFF_DESCRIPTIONS.get(valid_tariff, '')}",
                        parse_mode="Markdown",
                        reply_markup=get_main_menu_keyboard()
                    )
                else:
                    bot.send_message(
                        user_id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=types.ReplyKeyboardRemove()
                    )
        else:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ "
                "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫—É—Ä—Å–∞.",
                reply_markup=types.ReplyKeyboardRemove()
            )
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotStates.AWAITING_FEEDBACK)
    def handle_feedback(message):
        user_id = message.from_user.id
        feedback_text = message.text.strip()
        
        # Store feedback in temp_data
        temp_data[user_id] = {"feedback": feedback_text}
        
        # Ask for confirmation
        bot.send_message(
            user_id,
            f"*–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:*\n\n{feedback_text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            parse_mode="Markdown",
            reply_markup=get_feedback_confirm_keyboard()
        )
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotStates.AWAITING_HOMEWORK_SUBMISSION)
    def handle_homework_submission(message):
        user_id = message.from_user.id
        module_id = temp_data.get(user_id, {}).get("module_id")
        
        if not module_id:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            user_states.pop(user_id, None)
            temp_data.pop(user_id, None)
            return
        
        # Store submission in temp_data
        temp_data[user_id]["submission"] = message.text.strip()
        
        # Ask for confirmation
        bot.send_message(
            user_id,
            f"*–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è {module_id}:*\n\n"
            f"{temp_data[user_id]['submission']}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            parse_mode="Markdown",
            reply_markup=get_submit_homework_keyboard(module_id)
        )
    
    @bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    def back_to_main_menu(message):
        user_id = message.from_user.id
        
        # Clear any active states
        user_states.pop(user_id, None)
        temp_data.pop(user_id, None)
        
        show_main_menu(message, bot)
    
    @bot.message_handler(func=lambda message: True)
    def handle_text_messages(message):
        user_id = message.from_user.id
        text = message.text
        nonlocal bot, user_states
        
        # Handle main menu options
        if text == 'üìö –ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞':
            user = get_user(user_id)
            if not user:
                bot.send_message(
                    user_id,
                    "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
                )
                return
            
            tariff = user[4]
            available_modules = MODULE_ACCESS.get(tariff.lower(), [])
            
            bot.send_message(
                user_id,
                "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:*",
                parse_mode="Markdown",
                reply_markup=get_modules_keyboard(tariff, available_modules)
            )
        
        elif text == 'üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è':
            user = get_user(user_id)
            if not user:
                bot.send_message(
                    user_id,
                    "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
                )
                return
            
            tariff = user[4]
            available_modules = MODULE_ACCESS.get(tariff.lower(), [])
            
            bot.send_message(
                user_id,
                "*–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:*",
                parse_mode="Markdown",
                reply_markup=get_homework_keyboard(tariff, available_modules)
            )
        
        elif text == 'üîç –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å':
            progress_command(message, bot)
        
        elif text == 'üìä –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
            # URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            host = os.environ.get('REPLIT_APP_HOST', 'replit.dev')
            mini_app_url = f"https://{host}/mini-app?user_id={user_id}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                "üìä –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å", 
                web_app=types.WebAppInfo(url=mini_app_url)
            ))
            
            bot.send_message(
                user_id,
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫—É—Ä—Å—É:",
                reply_markup=markup
            )
        
        elif text == 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            feedback_command(message, bot, user_states)
        
        elif text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            info_command(message, bot)
        
        elif text == 'üìã –ú–æ–π —Ç–∞—Ä–∏—Ñ':
            user = get_user(user_id)
            if not user:
                bot.send_message(
                    user_id,
                    "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
                )
                return
            
            tariff = user[4]
            tariff_description = TARIFF_DESCRIPTIONS.get(tariff.lower(), "")
            available_modules = MODULE_ACCESS.get(tariff.lower(), [])
            
            tariff_text = (
                f"*–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff}*\n\n"
                f"{tariff_description}\n\n"
                f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:* {', '.join(map(str, available_modules))}\n\n"
                f"–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /access –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞."
            )
            
            bot.send_message(
                user_id,
                tariff_text,
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
        
        else:
            bot.send_message(
                user_id,
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=get_main_menu_keyboard()
            )


def register_callback_handlers(bot, user_states, temp_data):
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        user_id = call.from_user.id
        callback_data = call.data
        
        # Handle module selection
        if callback_data.startswith('module_'):
            module_id = int(callback_data.split('_')[1])
            handle_module_selection(call, module_id)
        
        # Handle locked module
        elif callback_data.startswith('locked_module_'):
            module_id = int(callback_data.split('_')[2])
            bot.answer_callback_query(
                call.id,
                text=f"–ú–æ–¥—É–ª—å {module_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
        
        # Handle homework selection
        elif callback_data.startswith('homework_'):
            module_id = int(callback_data.split('_')[1])
            handle_homework_selection(call, module_id)
        
        # Handle locked homework
        elif callback_data.startswith('locked_homework_'):
            module_id = int(callback_data.split('_')[2])
            bot.answer_callback_query(
                call.id,
                text=f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ {module_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
        
        # Handle navigation
        elif callback_data == 'back_to_main':
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            show_main_menu(call.message, bot)
        
        elif callback_data == 'back_to_modules':
            user = get_user(user_id)
            if user:
                tariff = user[4]
                available_modules = MODULE_ACCESS.get(tariff.lower(), [])
                
                try:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:*",
                        parse_mode="Markdown",
                        reply_markup=get_modules_keyboard(tariff, available_modules)
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        
        # Handle module materials
        elif callback_data.startswith('materials_'):
            module_id = int(callback_data.split('_')[1])
            # Show additional materials for the module
            materials = ADDITIONAL_MATERIALS.get(module_id, [])
            materials_text = f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–æ–¥—É–ª—è {module_id}:*\n\n"
            
            for i, material in enumerate(materials, 1):
                materials_text += f"{i}. {material}\n"
            
            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=materials_text,
                    parse_mode="Markdown",
                    reply_markup=get_additional_materials_keyboard(module_id)
                )
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}")
        
        # Handle module completion
        elif callback_data.startswith('complete_module_'):
            module_id = int(callback_data.split('_')[2])
            success = update_module_progress(user_id, module_id, True)
            
            if success:
                bot.answer_callback_query(
                    call.id,
                    text=f"–ú–æ–¥—É–ª—å {module_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π! üéâ",
                    show_alert=False
                )
            else:
                bot.answer_callback_query(
                    call.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
        
        # Handle homework submission
        elif callback_data.startswith('submit_homework_'):
            module_id = int(callback_data.split('_')[2])
            submission = temp_data.get(user_id, {}).get("submission", "")
            
            if submission:
                success = add_homework_submission(user_id, module_id, submission)
                
                if success:
                    # Clear states
                    user_states.pop(user_id, None)
                    temp_data.pop(user_id, None)
                    
                    try:
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö—É—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç.",
                            reply_markup=None
                        )
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
                    
                    show_main_menu(call.message, bot)
                else:
                    try:
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=None
                        )
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")
                    
                    show_main_menu(call.message, bot)
            else:
                bot.answer_callback_query(
                    call.id,
                    text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                    show_alert=True
                )
        
        # Handle homework cancellation
        elif callback_data.startswith('cancel_homework_'):
            # Clear states
            user_states.pop(user_id, None)
            temp_data.pop(user_id, None)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            
            show_main_menu(call.message, bot)
        
        # Handle feedback submission
        elif callback_data == 'submit_feedback':
            feedback_text = temp_data.get(user_id, {}).get("feedback", "")
            
            if feedback_text:
                success = add_feedback(user_id, feedback_text)
                
                if success:
                    # Clear states
                    user_states.pop(user_id, None)
                    temp_data.pop(user_id, None)
                    
                    try:
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="‚úÖ –í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤.",
                            reply_markup=None
                        )
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∑—ã–≤–µ: {str(e)}")
                    
                    # Notify admins about new feedback
                    for admin_id in ADMIN_IDS:
                        try:
                            bot.send_message(
                                admin_id,
                                f"*–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:*\n\n{feedback_text}",
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            logger.error(f"Failed to notify admin {admin_id}: {e}")
                    
                    show_main_menu(call.message, bot)
                else:
                    try:
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=None
                        )
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ—Ç–∑—ã–≤–∞: {str(e)}")
                    
                    show_main_menu(call.message, bot)
            else:
                bot.answer_callback_query(
                    call.id,
                    text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.",
                    show_alert=True
                )
        
        # Handle feedback cancellation
        elif callback_data == 'cancel_feedback':
            # Clear states
            user_states.pop(user_id, None)
            temp_data.pop(user_id, None)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            
            show_main_menu(call.message, bot)
        
        # Handle access code entry
        elif callback_data == 'enter_access_code':
            bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # Set user state to awaiting access code
            user_states[user_id] = BotStates.AWAITING_ACCESS_CODE
    
    def handle_module_selection(call, module_id):
        user_id = call.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.answer_callback_query(
                call.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
            return
        
        tariff = user[4]
        available_modules = MODULE_ACCESS.get(tariff.lower(), [])
        
        if module_id not in available_modules:
            bot.answer_callback_query(
                call.id,
                text=f"–ú–æ–¥—É–ª—å {module_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
            return
        
        # Get module content
        module_title = MODULES.get(module_id, f"–ú–æ–¥—É–ª—å {module_id}")
        module_description = MODULE_DESCRIPTIONS.get(module_id, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        module_text = f"*{module_title}*\n\n{module_description}"
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=module_text,
                parse_mode="Markdown",
                reply_markup=get_module_content_keyboard(module_id)
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {str(e)}")
    
    def handle_homework_selection(call, module_id):
        user_id = call.from_user.id
        user = get_user(user_id)
        
        if not user:
            bot.answer_callback_query(
                call.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
            return
        
        tariff = user[4]
        available_modules = MODULE_ACCESS.get(tariff.lower(), [])
        
        if module_id not in available_modules:
            bot.answer_callback_query(
                call.id,
                text=f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ {module_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
            return
        
        # Get homework content
        homework_text = HOMEWORK.get(module_id, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # Get user submissions for this module
        submissions = get_homework_submissions(user_id, module_id)
        
        submission_text = ""
        if submissions:
            submission_text = "\n\n*–í–∞—à–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:*\n"
            for idx, submission in enumerate(submissions[:3], 1):  # Show only the latest 3 submissions
                submission_date = submission[4][:16] if submission[4] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                submission_text += f"{idx}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {submission_date}\n"
            
            if len(submissions) > 3:
                submission_text += f"(–∏ –µ—â–µ {len(submissions) - 3} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π)"
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"{homework_text}{submission_text}",
                parse_mode="Markdown",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º", callback_data="back_to_modules")
                )
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")


def register_admin_handlers(bot, user_states, temp_data):
    @bot.message_handler(commands=['admin'], func=lambda message: message.from_user.id in ADMIN_IDS)
    def admin_command(message):
        admin_text = (
            "*–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/users - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/feedback - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã\n"
            "/broadcast - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/adduser - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/updatetariff - –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        
        bot.send_message(
            message.from_user.id,
            admin_text,
            parse_mode="Markdown"
        )
    
    # Other admin handlers can be added here


def register_state_handlers(bot, user_states, temp_data):
    # This function is for any additional state-based handlers
    # Currently, the state handlers are included in register_message_handlers
    pass


# Helper function to show main menu
def show_main_menu(message, bot_instance):
    user_id = message.from_user.id
    user = get_user(user_id)
    
    if user:
        bot_instance.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        bot_instance.send_message(
            user_id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access.",
            reply_markup=get_access_keyboard()
        )


# Helper functions for command handlers (to avoid circular imports)
def progress_command(message, bot_instance):
    user_id = message.from_user.id
    user = get_user(user_id)
    
    if not user:
        bot_instance.send_message(
            user_id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
        )
        return
    
    tariff = user[4]
    available_modules = MODULE_ACCESS.get(tariff.lower(), [])
    progress = get_module_progress(user_id)
    
    # Convert progress data to a more usable format
    completed_modules = [module_id for module_id, completed in progress if completed]
    
    # Create progress message
    progress_text = "*–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É:*\n\n"
    
    for module_id in available_modules:
        module_name = MODULES.get(module_id, f"–ú–æ–¥—É–ª—å {module_id}")
        status = "‚úÖ" if module_id in completed_modules else "‚è≥"
        progress_text += f"{status} –ú–æ–¥—É–ª—å {module_id}: {module_name}\n"
    
    # Calculate overall progress
    completed_percentage = 0
    if available_modules:
        completed_percentage = (len(completed_modules) / len(available_modules)) * 100
    
    progress_text += f"\n*–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {completed_percentage:.1f}%*"
    
    bot_instance.send_message(
        user_id,
        progress_text,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )


def feedback_command(message, bot_instance, user_states):
    user_id = message.from_user.id
    user = get_user(user_id)
    
    if not user:
        bot_instance.send_message(
            user_id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /access."
        )
        return
    
    bot_instance.send_message(
        user_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
        reply_markup=get_back_keyboard()
    )
    
    # Set user state to awaiting feedback
    user_states[user_id] = BotStates.AWAITING_FEEDBACK


def info_command(message, bot_instance):
    user_id = message.from_user.id
    
    info_text = (
        "*–û –∫—É—Ä—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏*\n\n"
        "–≠—Ç–æ—Ç –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞. "
        "–û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 –º–æ–¥—É–ª–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ "
        "–∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n"
        
        "*–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞:*\n"
        "‚Ä¢ 8 –º–æ–¥—É–ª–µ–π —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π\n\n"
        
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–π: –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º 1-3\n"
        "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º 1-5\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º: –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º\n"
        "‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'."
    )
    
    bot_instance.send_message(
        user_id,
        info_text,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )
