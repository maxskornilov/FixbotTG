from telebot import types
from modules_content import MODULES

# Main menu keyboard
def get_main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üìö –ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞'),
        types.KeyboardButton('üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è'),
        types.KeyboardButton('üîç –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'),
        types.KeyboardButton('üìä –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
        types.KeyboardButton('üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'),
        types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        types.KeyboardButton('üìã –ú–æ–π —Ç–∞—Ä–∏—Ñ')
    ]
    markup.add(*buttons)
    return markup

# Back to main menu button
def get_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    return markup

# Modules selection keyboard
def get_modules_keyboard(user_tariff=None, available_modules=None):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if not available_modules:
        available_modules = list(MODULES.keys())
    
    buttons = []
    for module_id, module_name in MODULES.items():
        if module_id in available_modules:
            button_text = f"–ú–æ–¥—É–ª—å {module_id}: {module_name}"
            buttons.append(types.InlineKeyboardButton(
                button_text, callback_data=f"module_{module_id}"
            ))
        else:
            button_text = f"üîí –ú–æ–¥—É–ª—å {module_id}: {module_name}"
            buttons.append(types.InlineKeyboardButton(
                button_text, callback_data=f"locked_module_{module_id}"
            ))
    
    # Add buttons to markup
    for button in buttons:
        markup.add(button)
    
    # Add back button
    markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    return markup

# Homework selection keyboard
def get_homework_keyboard(user_tariff=None, available_modules=None):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if not available_modules:
        available_modules = list(MODULES.keys())
    
    buttons = []
    for module_id, module_name in MODULES.items():
        if module_id in available_modules:
            button_text = f"–ó–∞–¥–∞–Ω–∏–µ {module_id}: {module_name}"
            buttons.append(types.InlineKeyboardButton(
                button_text, callback_data=f"homework_{module_id}"
            ))
        else:
            button_text = f"üîí –ó–∞–¥–∞–Ω–∏–µ {module_id}: {module_name}"
            buttons.append(types.InlineKeyboardButton(
                button_text, callback_data=f"locked_homework_{module_id}"
            ))
    
    # Add buttons to markup
    for button in buttons:
        markup.add(button)
    
    # Add back button
    markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    return markup

# Module content keyboard
def get_module_content_keyboard(module_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    markup.add(
        types.InlineKeyboardButton("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"materials_{module_id}"),
        types.InlineKeyboardButton("üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"homework_{module_id}")
    )
    
    markup.add(
        types.InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π", callback_data=f"complete_module_{module_id}"),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π", callback_data="back_to_modules")
    )
    
    return markup

# Access code request keyboard
def get_access_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="enter_access_code"))
    return markup

# Confirm homework submission keyboard
def get_submit_homework_keyboard(module_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"submit_homework_{module_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_homework_{module_id}")
    )
    return markup

# Additional materials keyboard
def get_additional_materials_keyboard(module_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}"))
    return markup

# Feedback confirmation keyboard
def get_feedback_confirm_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit_feedback"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")
    )
    return markup
